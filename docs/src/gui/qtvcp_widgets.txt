= QTvcp Widgets

Qtscreen uses QTvcp widgets for linuxcnc integration.
Widget is the general name for the UI objects such as buttons and labels in QTpy4. +
You are free to use any available widgets in the QTDesigner editor. +
There are also special widgets made for linuxcnc that make integration easier. +
This are split in two heading on the right side of the editor. +
One is for HAL only widgets. +
The other is for cnc control widgets. +
you are free to mix them in any way on your panel. +

== HAL Only Widgets

These Widgets have HAL pins and don't react to the machine Controller

=== Checkbox Widget

This widget allows the user to check a box to set a HAL pin true or false. +

It is based on pyQT's QCheckButton

=== Radio Button Widget

This widget allows a user to set HAL pins true or false. +
Only one widget of a group can be true at a time. +

It is based on pyQT's QRadioButton

=== Push Button Widget

This widget allows a user to set a HAL pin true or false. +
as an option it can be a toggle button. +

It is based on pyQT's QpushButton

=== Focus Overlay Widget

This widget places a coloured overlay over the screen usually while a dialog is showing.
used to create a 'focused' feel and to draw attention to critical information. +
It can also show a translucent image. +
It can also display message text and buttons. +
This widget can be controller with STATUS messages. +

=== Grid Layout Widget

This widget controls if the widgets inside it are enabled or disabled. +
disabled widgets are typically a different colour and do not respond to actions. +

It is based on pyQT's QGridLayout

=== LCD Number Widget

This widget displays HAL float values in a LCD looking way. +

It is based on pyQT's QLCDNumber

=== CamView Widget

This widget displays a image from a web camera. +
It overlays an adjustable circular and cross hair target over the image. +
Camview was built with precision visually positioning in mind. +

== Machine Controller Widgets

These widgets interact to the Machine Controller state.

=== Action Button Widget

These buttons are used to control action of the machine controller. +
You can select one of these actions: +
Estop +
Machine On +
Auto +
mdi +
manual +
run +
abort +
pause +
load dialog (requires a dialog widget present) +
Camview dialog (requires camview dialog widget present) +
origin offset dialog (requires origin offset dialog widget present) +
macro dialog (requires macro dialog widget present) +
Launch Halmeter +
Launch Status +
Launch Halshow +
Home (set the joint number to -1 for all-home) +
zero axis +
jog joint positive (set the joint number) +
jog joint negative (set the joint number) +
jog selected positive (selected with a different widget or STATUS) +
jog selected negative (selected with a different widget or STATUS) +
jog increment (set metric/imperial/angular numbers) +
jog rate (set the float/alt float number) +
feed override (set the float/alt float number) +
rapid override (set the float/alt float number) +
spindle override (set the float/alt float number) +
spindle fwd
spindle bacward
spindle stop
spindle up
spindle down +
view change (set view type string) +
limits override +
flood +
mist +
block delete +
optional stop +
mdi command (set command string) +
dro absolute +
dro relative +
dro dtg +

These set attributes of the selected action. Availability depends on the widget. +
 +
'toggle float option' - allows jog rate and overrides to toggle between two rates +
'joint number' - selects the joint/axis that the button controls +
'incr imperial number' - sets the imperial jog increment (set negative to ignore) +
'incr mm number' -sets the metric jog increment (set negative to ignore) +
'incr angular number' -sets the angular jog increment (set negative to ignore) +
'float number' - used for jograte and overrides +
'float alternate number' -for jograte and overrides that can toggle between two float numbers +
'view type string' - can be p, x, y, y2, z, z2, clear +
'command string' - MDI command string. can be a direct command or a reference to +
the INI file [MDI_COMMAND_LIST] section. To use the INI reference type 'MDI_COMMAND_LIST=0', 0 being +
an integer of the INI's MDI_COMMAND line starting at 0. Then in the INI file, under the heading +
'[MDI_COMMAND_LIST]' add a line: 'MDI_COMMAND=<some command>' some command being the MDI command. +

It is based on pyQT's QButton

=== Axis Tool Button
This allows one to select and set an AXIS.
If the button is set checkable, it will indicate which axis is selected. +
If you press and hold the button a pop up menu will show allowing one to: +

* Zero the axis
* divide the axis by 2
* set the axis arbitrarily
* reset the axis to the last number recorded

You select the axis by setting the joint number +
You can select a halpin option that is set true when the axis is selected +

It is based on pyQT's QToolButton

=== Camview Widget
This is used to align the work piece or zero part features using a webcam. +
It uses opencv vision library. +

===  DRO Widget
This will display the current position of an axis. +

It is based on pyQT's

=== Gcode Widget
This displays Gcode in text form. It will highlight the currently running line. +

It is based on pyQT's QsciScintilla +

=== Graphics Widget
This Displays the current Gcode in a graphical form. +

todo +
It is based on pyQT's opengl widget. +

===  Gstat_bool_label Widget
This will display a label based on true/false states of the machine controller. +
You can select different text based on true or false. +
You can use Rich text for different fonts/colours etc. +
These states are selectable: +
CSS Mode +
Diameter Mode +
FPR Mode +
Metric Mode +

It is based on pyQT's QLabel

===  Gstat Label Widget
This will display a label based on variable states of the machine controller. +
You can change how the state will be display by substituting  +
You can use Rich text for different fonts/colors etc. +
These states are selectable: +
CSS Mode +
Feed Override  +
Rapid Override  +
Spindle Override  +
Jograte  +
Jogincr  +
Tool Number  +
Current Feedrate  +
Requested Spindle Speed  +
User System  +

It is based on pyQT's QLabel

===  Gstat stacked
This widget displays on of three panels based on linuxcnc's mode. +
This allows you to automatically display different widgets on Manual, MDI and Auto modes. +

todo +
It is based on pyQT's QStacked widget.

===  Jog Increments Widget

This widget allows the user to select jog increment values for jogging. +
The jogging values come from the INI file under: '[DISPLAY]', "INCREMENTS" +
This will be available to all widgets through STATUS. +

It is based on pyQT's combobox

=== screenOption widget

This widget doesn't add anything visually to a screen but sets up important +
options. +

.These include: 
* monitoring the linuxcnc error channel.
* Hooking into the desktop notification bubbles for error and messages
* catching the close event to pop up a 'are you sure' prompt
* playing sounds
* user defined pop up message dialogs
* setting up a preference file


=== Slider Widget

This widget allow the user to adjust linuxcnc setting via a slide. +

.The widget can adjust:
* Jog rate
* Angular jog rate
* Feed rate
* spindle override rate
* Rapid override rate

It is based on pyQT's QSlider

===  Led State Widget

This widget gives status on linuxcnc's state. +

It is based on the LED widget 

=== StatusAdjustmentBar

This widget allows setting values using buttons while displaying a bar. +
It also has an optional hi/low toggle button that can be held down to set the +
levels.

.The widget can adjust:
* Jog rate
* angular jog rate
* Feed rate
* Spindle override rate
* Rapid override rate

It is based on pyQT's QProgressBar

=== SystemToolButton
This widget allows you to manually select a user system by pressing and holding. +
If you don't set the button text it will automatically update to the current system. +

It is based on pyQT's QToolButton

===  Macro Widget

This Widget allows a user to select and adjust special macro programs for 
doing small jobs. +
It uses svg images for visual representation of the macro and for an icon. +
The macros are Oword subroutine with special comments to work with the launcher. +

=== MDI line Widget

More todo +
There are Embedded commands available from this Widget. +
Type, in all capitols, any of these commands to load the respective program: +
HALMETER +
HALSHOW +
HALSCOPE +
STATUS +
CALIBRATION +
CLASSICLADDER +
It is based on pyQT's QLineEdit +

===  Origin Offset Widget
This widget allows one to modify User System origin offsets directly

It is based on pyQT's

=== State Enable Gridlayout Widgets

This is a container that other widgets can be placed in. +
It will 'grey-out' (disable) the widgets inside it depending on linuxcnc's current state. +
It can selectably react to machine on, interpreter idle, estop off, all-homed +
It is based on pyQT's QGridLayout +




== Dialog Widgets

===  Lcnc_Dialog

This is a general dialog widget. +
If there is an Focus Overlay widget present, it can signal it to display. +
If the sound library is set up it can play sounds. +

It is based on pyQT's QMessagebox

===  Dialog Tool Change Widget
This is used as a manual tool change prompt. +
It has HAL pins to connect to the machine controller +
The pins are named the same as the original AXIS manual tool prompt and works +
the same. +
If there is a Focus Overlay widget present, it will signal it to display. +

It is based on pyQT's QMessagebox

===  Dialog File Chooser Widget
This is used to load Gcode files +
If there is a Focus Overlay widget present, it will signal it to display. +

It is based on pyQT's QMessagebox

===  Dialog Origin Offset Widget
This widget allows one to modify User System origin offsets directly +
It is in a dialog form +
If there is an Focus Overlay widget present, it will signal it to display. +

It is based on pyQT's QDialog

===  Dialog MacroTab

This is a dialog for displaying the macrotab widget. +
Macrotab displays a choice of macro programs to run using icons. +
If there is a Focus Overlay widget present, it will signal it to display. +

===  Dialog camview

This is a dialog to display the camview object for Webcam part alignment. +
It is based on pyQT's QDialog
